class i{constructor(){if(this.items=[],typeof localStorage<"u"){const t=localStorage.getItem("cart");if(t)try{this.items=JSON.parse(t),console.log("[cart] Loaded items from localStorage:",this.items)}catch(e){console.warn("[cart] Failed to parse cart from localStorage",e)}}}save(){typeof localStorage<"u"&&(localStorage.setItem("cart",JSON.stringify(this.items)),console.log("[cart] Saved items to localStorage:",this.items))}addItem(t){console.log("[cart] Adding item:",t);const e=this.items.find(s=>s.id===t.id);if(e)e.quantity=(e.quantity||1)+1,console.log("[cart] Increased quantity:",e);else{const s=Object.assign({},t,{quantity:1});this.items.push(s),console.log("[cart] Pushed new item:",s)}this.save(),this.dispatchUpdate()}removeItem(t){console.log("[cart] Removing item with ID:",t),this.items=this.items.filter(e=>e.id!==t),this.save(),this.dispatchUpdate()}clear(){this.items=[],this.save(),this.dispatchUpdate()}getTotalCount(){const t=this.items.reduce((e,s)=>e+(s.quantity||1),0);return console.log("[cart] Total count:",t),t}getItems(){return console.log("[cart] getItems called. Current items:",this.items),this.items.slice()}hasItem(t){return this.items.some(e=>e.id===t)}dispatchUpdate(){window.dispatchEvent(new CustomEvent("cartUpdated"))}}const o=new i;export{o as c};
