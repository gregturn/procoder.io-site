const a=window.gtag||void 0;console.log("analyticsUtils: typeof gtag: "+typeof a);function s(t){if(typeof a!="function"){console.log("gtag not a function");return}a("event","view_item",{currency:"USD",value:t.price*(t.quantity||1),items:[{item_id:t.id,item_name:t.name,price:t.price,quantity:t.quantity||1}]})}function i(t){if(typeof a!="function"){console.log("gtag not a function");return}a("event","add_to_cart",{currency:"USD",value:t.price*(t.quantity||1),items:[{item_id:t.id,item_name:t.name,price:t.price,quantity:t.quantity||1}]}),console.log("Reporting add_to_cart for "+JSON.stringify(t)+" to Google Analytics")}function c(t){if(typeof a!="function"){console.log("gtag not a function");return}a("event","remove_from_cart",{currency:"USD",value:t.price*(t.quantity||1),items:[{item_id:t.id,item_name:t.name,price:t.price,quantity:t.quantity||1}]}),console.log("Reporting remove_from_cart for "+JSON.stringify(t)+" to Google Analytics")}function l(t){if(typeof a!="function"){console.log("gtag not a function");return}const o=t.reduce((e,n)=>e+n.price*(n.quantity||1),0);a("event","begin_checkout",{currency:"USD",value:o,items:t.map(e=>({item_id:e.id,item_name:e.name,price:e.price,quantity:e.quantity||1}))}),console.log("Reporting begin_checkout for $"+o+" to Google Analytics")}function u(t){if(typeof a!="function"){console.log("gtag not a function");return}const o=t.reduce((e,n)=>e+n.price*(n.quantity||1),0);a("event","purchase",{currency:"USD",value:o,items:t.map(e=>({item_id:e.id,item_name:e.name,price:e.price,quantity:e.quantity||1}))}),console.log("Reporting purchase of $"+o+" to Google Analytics.")}class r{items=[];constructor(){if(typeof localStorage<"u"){const o=localStorage.getItem("cart");if(o)try{this.items=JSON.parse(o),console.log("[cart] Loaded items from localStorage:",this.items)}catch(e){console.warn("[cart] Failed to parse cart from localStorage",e)}}}save(){typeof localStorage<"u"&&(localStorage.setItem("cart",JSON.stringify(this.items)),console.log("[cart] Saved items to localStorage:",this.items))}addItem(o){console.log("[cart] Adding item:",o),i(o);const e=this.items.find(n=>n.id===o.id);if(e)e.quantity=(e.quantity||1)+1,console.log("[cart] Increased quantity:",e);else{const n={...o,quantity:1};this.items.push(n),console.log("[cart] Pushed new item:",n)}this.save(),this.dispatchUpdate()}removeItem(o){console.log("[cart] Removing item with ID:",o.id),c(o),this.items=this.items.filter(e=>e.id!==o.id),this.save(),this.dispatchUpdate()}clear(){this.items=[],this.save(),this.dispatchUpdate()}getTotalCount(){const o=this.items.reduce((e,n)=>e+(n.quantity||1),0);return console.log("[cart] Total count:",o),o}getItems(){return console.log("[cart] getItems called. Current items:",this.items),[...this.items]}hasItem(o){return this.items.some(e=>e.id===o)}dispatchUpdate(){window.dispatchEvent(new CustomEvent("cartUpdated"))}}const g=new r;export{u as a,l as b,g as c,s as t};
